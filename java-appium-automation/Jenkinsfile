pipeline {
    agent any
    
    environment {
        MAVEN_HOME = 'C:\\Program Files\\Apache\\maven'
        JAVA_HOME = 'C:\\Program Files\\Java\\jdk-11'
        PATH = "C:\\Program Files\\Apache\\maven\\bin;C:\\Program Files\\Java\\jdk-11\\bin;C:\Program Files\Common Files\Oracle\Java\javapath;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Program Files\Java\jdk-24\bin;C:\Program Files\Maven\ApacheMaven\apache-maven-3.9.11\bin;C:\Program Files\nodejs\;C:\ProgramData\chocolatey\bin;C:\Users\Asim\AppData\Local\Android\Sdk\platform-tools;C:\Users\Asim\AppData\Local\Android\Sdk\emulator;C:\Users\Asim\AppData\Local\Programs\Python\Python313;C:\Users\Asim\AppData\Local\Programs\Python\Python313\Scripts\;C:\Program Files\Git\cmd;C:\Users\Asim\AppData\Local\Programs\Python\Python313\Scripts\;C:\Users\Asim\AppData\Local\Programs\Python\Python313\;C:\Users\Asim\AppData\Local\Microsoft\WindowsApps;;C:\Program Files\JetBrains\IntelliJ IDEA Community Edition 2025.1.4.1\bin;;C:\Users\Asim\AppData\Roaming\npm"
        APPIUM_SERVER = 'http://127.0.0.1:4723'
        DEVICE_NAME = 'Android_Device'
        PLATFORM_VERSION = '11'
    }
    
    parameters {
        choice(
            name: 'TEST_SUITE',
            choices: ['smoke-tests', 'regression-tests', 'all-tests'],
            description: 'Select test suite to execute'
        )
        booleanParam(
            name: 'GENERATE_REPORTS',
            defaultValue: true,
            description: 'Generate ExtentReports after execution'
        )
        string(
            name: 'DEVICE_UDID',
            defaultValue: 'PZPVSC95GMKNGUBQ',
            description: 'Device UDID for test execution'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo 'Setting up test environment...'
                script {
                    // Check if Appium server is running
                    def appiumStatus = sh(
                        script: "curl -s ${APPIUM_SERVER}/status || echo 'Appium not running'",
                        returnStdout: true
                    ).trim()
                    
                    if (appiumStatus.contains('Appium not running')) {
                        error 'Appium server is not running. Please start Appium server.'
                    }
                    
                    echo "Appium server is running: ${appiumStatus}"
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building the project...'
                dir('java-appium-automation') {
                    sh 'mvn clean compile'
                }
            }
        }
        
        stage('Test Execution') {
            steps {
                echo "Executing ${params.TEST_SUITE} test suite..."
                dir('java-appium-automation') {
                    script {
                        def testSuite = params.TEST_SUITE
                        def suiteFile = "src/test/resources/suites/${testSuite}.xml"
                        
                        sh """
                            mvn test -Dsurefire.suiteXmlFiles=${suiteFile} \
                                    -Ddevice.name=${params.DEVICE_UDID} \
                                    -Dplatform.version=${PLATFORM_VERSION} \
                                    -Dappium.server=${APPIUM_SERVER}
                        """
                    }
                }
            }
            post {
                always {
                    // Archive test results
                    dir('java-appium-automation') {
                        archiveArtifacts artifacts: 'target/surefire-reports/**/*', allowEmptyArchive: true
                        publishTestResults testResultsPattern: 'target/surefire-reports/TEST-*.xml'
                    }
                }
            }
        }
        
        stage('Generate Reports') {
            when {
                expression { params.GENERATE_REPORTS }
            }
            steps {
                echo 'Generating test reports...'
                dir('java-appium-automation') {
                    script {
                        // Archive ExtentReports
                        archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
                        
                        // Publish HTML reports
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'reports',
                            reportFiles: '*.html',
                            reportName: 'Appium Test Report',
                            reportTitles: 'Mobile Automation Test Results'
                        ])
                    }
                }
            }
        }
        
        stage('Notification') {
            steps {
                echo 'Sending notifications...'
                script {
                    def testResults = readFile('java-appium-automation/target/surefire-reports/emailable-report.html')
                    
                    // Email notification (configure email settings in Jenkins)
                    emailext (
                        subject: "Mobile Test Execution - ${currentBuild.currentResult}",
                        body: """
                            <h2>Mobile Automation Test Results</h2>
                            <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                            <p><strong>Status:</strong> ${currentBuild.currentResult}</p>
                            <p><strong>Test Suite:</strong> ${params.TEST_SUITE}</p>
                            <p><strong>Device:</strong> ${params.DEVICE_UDID}</p>
                            <p><strong>Reports:</strong> <a href="${env.BUILD_URL}Appium_Test_Report/">View Reports</a></p>
                            
                            <h3>Quick Summary:</h3>
                            ${testResults}
                        """,
                        mimeType: 'text/html',
                        to: 'asim.kumar.singh@company.com'
                    )
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up workspace...'
            echo "Workspace cleanup completed"
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for details.'
        }
    }
}
