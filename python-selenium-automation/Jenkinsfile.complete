pipeline {
    agent any

    environment {
        PYTHON_VERSION = '3.9'
        SELENIUM_HUB = 'http://localhost:4444'
        BROWSER = 'chrome'
        HEADLESS = 'true'
        PYTHONPATH = "${WORKSPACE}\\python-selenium-automation"
        PATH = "C:\\Python39;C:\\Python39\\Scripts;${PATH}"
    }

    parameters {
        choice(
            name: 'TEST_SUITE',
            choices: ['smoke', 'regression', 'cross_browser', 'api'],
            description: 'Select test suite to execute'
        )
        choice(
            name: 'BROWSER_TYPE',
            choices: ['chrome', 'firefox', 'edge', 'safari'],
            description: 'Select browser for testing'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['qa', 'staging', 'production'],
            description: 'Select environment for testing'
        )
        booleanParam(
            name: 'HEADLESS_MODE',
            defaultValue: true,
            description: 'Run tests in headless mode'
        )
        booleanParam(
            name: 'PARALLEL_EXECUTION',
            defaultValue: false,
            description: 'Enable parallel test execution'
        )
        string(
            name: 'PYTEST_MARKERS',
            defaultValue: '',
            description: 'Pytest markers to filter tests (e.g., "smoke and not slow")'
        )
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code for Python Selenium automation...'
                checkout scm
                echo 'Source code checkout completed successfully'
            }
        }

        stage('Environment Setup') {
            steps {
                echo 'Setting up Python environment...'
                dir('python-selenium-automation') {
                    script {
                        try {
                            bat '''
                                echo Current directory: %CD%
                                dir
                                
                                REM Check Python installation
                                python --version
                                pip --version
                                
                                REM Create virtual environment
                                python -m venv venv
                                
                                REM Activate virtual environment and install dependencies
                                call venv\\Scripts\\activate.bat
                                
                                REM Upgrade pip
                                python -m pip install --upgrade pip
                                
                                REM Install dependencies if requirements.txt exists
                                if exist requirements.txt (
                                    pip install -r requirements.txt
                                ) else (
                                    echo No requirements.txt found, installing basic dependencies
                                    pip install selenium pytest pytest-html pytest-xdist pytest-cov allure-pytest
                                )
                                
                                REM Install additional CI dependencies
                                pip install pytest-html pytest-xdist pytest-cov allure-pytest requests
                                
                                REM Create drivers directory
                                if not exist drivers mkdir drivers
                                
                                echo Environment setup completed successfully
                            '''
                        } catch (Exception e) {
                            echo "Environment setup failed: ${e.getMessage()}"
                            // Continue with basic setup
                            bat '''
                                python --version
                                pip install selenium pytest pytest-html
                            '''
                        }
                    }
                }
            }
        }

        stage('Code Quality') {
            parallel {
                stage('Linting') {
                    steps {
                        echo 'Running code linting...'
                        dir('python-selenium-automation') {
                            script {
                                try {
                                    bat '''
                                        call venv\\Scripts\\activate.bat
                                        
                                        REM Install linting tools
                                        pip install flake8 pylint black isort
                                        
                                        REM Run flake8 (basic syntax check)
                                        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 completed with warnings"
                                        
                                        REM Run pylint (generate report)
                                        pylint --exit-zero **/*.py > pylint-report.txt || echo "Pylint completed"
                                        
                                        echo Linting completed
                                    '''
                                } catch (Exception e) {
                                    echo "Linting failed: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                    post {
                        always {
                            script {
                                if (fileExists('python-selenium-automation/pylint-report.txt')) {
                                    archiveArtifacts artifacts: 'python-selenium-automation/pylint-report.txt', allowEmptyArchive: true
                                }
                            }
                        }
                    }
                }

                stage('Security Scan') {
                    steps {
                        echo 'Running security scan...'
                        dir('python-selenium-automation') {
                            script {
                                try {
                                    bat '''
                                        call venv\\Scripts\\activate.bat
                                        
                                        REM Install security tools
                                        pip install bandit safety
                                        
                                        REM Run bandit security scan
                                        bandit -r . -f json -o bandit-report.json || echo "Bandit scan completed"
                                        
                                        REM Check for known security vulnerabilities
                                        safety check --json --output safety-report.json || echo "Safety check completed"
                                        
                                        echo Security scan completed
                                    '''
                                } catch (Exception e) {
                                    echo "Security scan failed: ${e.getMessage()}"
                                }
                            }
                        }
                    }
                    post {
                        always {
                            script {
                                if (fileExists('python-selenium-automation/bandit-report.json') || fileExists('python-selenium-automation/safety-report.json')) {
                                    archiveArtifacts artifacts: 'python-selenium-automation/*-report.json', allowEmptyArchive: true
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                dir('python-selenium-automation') {
                    script {
                        try {
                            bat '''
                                call venv\\Scripts\\activate.bat
                                
                                REM Create reports directory
                                if not exist reports mkdir reports
                                
                                REM Run unit tests if they exist
                                if exist tests\\unit (
                                    pytest tests\\unit\\ -v --junit-xml=reports\\unit-tests.xml --html=reports\\unit-tests.html --self-contained-html
                                ) else (
                                    echo No unit tests found, creating dummy report
                                    echo ^<testsuite name="unit-tests" tests="0" failures="0" errors="0"^>^</testsuite^> > reports\\unit-tests.xml
                                )
                            '''
                        } catch (Exception e) {
                            echo "Unit tests failed: ${e.getMessage()}"
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('python-selenium-automation/reports/unit-tests.xml')) {
                            publishTestResults testResultsPattern: 'python-selenium-automation/reports/unit-tests.xml'
                        }
                        if (fileExists('python-selenium-automation/reports/unit-tests.html')) {
                            publishHTML([
                                allowMissing: true,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'python-selenium-automation/reports',
                                reportFiles: 'unit-tests.html',
                                reportName: 'Unit Test Report'
                            ])
                        }
                    }
                }
            }
        }

        stage('Integration Tests') {
            steps {
                echo "Running ${params.TEST_SUITE} tests on ${params.BROWSER_TYPE}..."
                dir('python-selenium-automation') {
                    script {
                        try {
                            def markerFilter = params.PYTEST_MARKERS ? "-m \"${params.PYTEST_MARKERS}\"" : ""
                            def parallelFlag = params.PARALLEL_EXECUTION ? "-n auto" : ""

                            bat """
                                call venv\\Scripts\\activate.bat
                                
                                REM Set environment variables
                                set BROWSER=${params.BROWSER_TYPE}
                                set HEADLESS=${params.HEADLESS_MODE}
                                set ENVIRONMENT=${params.ENVIRONMENT}
                                
                                REM Create reports directory
                                if not exist reports mkdir reports
                                
                                REM Run integration tests
                                if exist tests\\${params.TEST_SUITE} (
                                    pytest tests\\${params.TEST_SUITE}\\ -v ${markerFilter} ${parallelFlag} --junit-xml=reports\\integration-tests.xml --html=reports\\integration-tests.html --self-contained-html --capture=no
                                ) else (
                                    echo Test suite ${params.TEST_SUITE} not found, running smoke tests
                                    if exist tests\\smoke (
                                        pytest tests\\smoke\\ -v --junit-xml=reports\\integration-tests.xml --html=reports\\integration-tests.html --self-contained-html
                                    ) else (
                                        echo No tests found, creating dummy report
                                        echo ^<testsuite name="integration-tests" tests="0" failures="0" errors="0"^>^</testsuite^> > reports\\integration-tests.xml
                                    )
                                )
                            """
                        } catch (Exception e) {
                            echo "Integration tests failed: ${e.getMessage()}"
                            // Create dummy report for pipeline continuation
                            bat '''
                                if not exist reports mkdir reports
                                echo ^<testsuite name="integration-tests" tests="0" failures="0" errors="1"^>^</testsuite^> > reports\\integration-tests.xml
                            '''
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        if (fileExists('python-selenium-automation/reports/integration-tests.xml')) {
                            publishTestResults testResultsPattern: 'python-selenium-automation/reports/integration-tests.xml'
                        }
                        if (fileExists('python-selenium-automation/screenshots')) {
                            archiveArtifacts artifacts: 'python-selenium-automation/screenshots/**/*', allowEmptyArchive: true
                        }
                        if (fileExists('python-selenium-automation/reports')) {
                            archiveArtifacts artifacts: 'python-selenium-automation/reports/**/*', allowEmptyArchive: true
                        }
                    }
                }
            }
        }
