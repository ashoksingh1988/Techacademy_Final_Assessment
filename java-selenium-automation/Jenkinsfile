pipeline {
    agent any
    
    environment {
        MAVEN_HOME = tool 'Maven'
        JAVA_HOME = 'C:/Program Files/Java/jdk-24'
        PATH = "${MAVEN_HOME}/bin;${JAVA_HOME}/bin;${PATH}"
        SELENIUM_HUB = 'http://localhost:4444'
        BROWSER = 'chrome'
        HEADLESS = 'true'
    }
    
    parameters {
        choice(
            name: 'TEST_SUITE',
            choices: ['smoke-tests', 'regression-tests', 'cross-browser-tests'],
            description: 'Select test suite to execute'
        )
        choice(
            name: 'BROWSER_TYPE',
            choices: ['chrome', 'firefox', 'edge', 'safari'],
            description: 'Select browser for testing'
        )
        choice(
            name: 'ENVIRONMENT',
            choices: ['qa', 'staging', 'production'],
            description: 'Select environment for testing'
        )
        booleanParam(
            name: 'HEADLESS_MODE',
            defaultValue: true,
            description: 'Run tests in headless mode'
        )
        booleanParam(
            name: 'PARALLEL_EXECUTION',
            defaultValue: false,
            description: 'Enable parallel test execution'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Environment Setup') {
            steps {
                echo 'Setting up Selenium environment (Windows, WebDriverManager will handle drivers)...'
                // No manual driver download needed because WebDriverManager is used in pom.xml
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building the Selenium project...'
                dir('java-selenium-automation') {
                    bat 'mvn -v'
                    bat 'mvn clean compile'
                }
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                dir('java-selenium-automation') {
                    bat 'mvn test -Dtest=*UnitTest'
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo "Executing ${params.TEST_SUITE} on ${params.BROWSER_TYPE}..."
                dir('java-selenium-automation') {
                    script {
                        def testSuite = params.TEST_SUITE
                        def suiteMap = [
                            'smoke-tests': 'src/test/resources/suites/selenium-smoke-tests.xml',
                            'regression-tests': 'src/test/resources/suites/selenium-regression-tests.xml',
                            'cross-browser-tests': 'src/test/resources/suites/selenium-smoke-tests.xml'
                        ]
                        def suiteFile = suiteMap.get(testSuite, 'src/test/resources/suites/selenium-smoke-tests.xml')
                        
                        bat "mvn test -Dsurefire.suiteXmlFiles=${suiteFile} -Dbrowser=${params.BROWSER_TYPE} -Denvironment=${params.ENVIRONMENT} -Dheadless=${params.HEADLESS_MODE} -Dparallel=${params.PARALLEL_EXECUTION}"
                    }
                }
            }
            post {
                always {
                    echo 'Cleaning up workspace...'
                    bat 'if exist drivers rmdir /s /q drivers'
                    cleanWs()

                    dir('java-selenium-automation') {
                        // Archive test results
                        archiveArtifacts artifacts: 'target/surefire-reports/**/*', allowEmptyArchive: true
                        junit testResults: 'target/surefire-reports/*.xml', allowEmptyResults: true

                        // Archive screenshots
                        archiveArtifacts artifacts: 'screenshots/**/*', allowEmptyArchive: true
                    }
                }
                success {
                    echo 'Selenium pipeline executed successfully!'
                }
                failure {
                    echo 'Selenium pipeline failed. Check logs for details.'
                }
                unstable {
                    echo 'Selenium pipeline completed with test failures.'
                }
            }
        }
        
        stage('Cross-Browser Testing') {
            when {
                expression { params.TEST_SUITE == 'cross-browser-tests' }
            }
            parallel {
                stage('Chrome Tests') {
                    steps {
                        dir('java-selenium-automation') {
                            bat 'mvn test -Dbrowser=chrome -Dsurefire.suiteXmlFiles=src/test/resources/suites/selenium-smoke-tests.xml'
                        }
                    }
                }
                stage('Firefox Tests') {
                    steps {
                        dir('java-selenium-automation') {
                            bat 'mvn test -Dbrowser=firefox -Dsurefire.suiteXmlFiles=src/test/resources/suites/selenium-smoke-tests.xml'
                        }
                    }
                }
                stage('Edge Tests') {
                    steps {
                        dir('java-selenium-automation') {
                            bat 'mvn test -Dbrowser=edge -Dsurefire.suiteXmlFiles=src/test/resources/suites/selenium-smoke-tests.xml'
                        }
                    }
                }
            }
        }
        
        stage('Performance Tests') {
            steps {
                echo 'Running performance tests...'
                dir('java-selenium-automation') {
                    bat 'mvn test -Dtest=*PerformanceTest'
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                echo 'Generating comprehensive test reports...'
                dir('java-selenium-automation') {
                    script {
                        // Generate Surefire reports
                        bat 'mvn surefire-report:report'
                        
                        // Archive ExtentReports
                        archiveArtifacts artifacts: 'reports/**/*', allowEmptyArchive: true
                        
                        // Publish HTML reports
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: 'reports',
                            reportFiles: '*.html',
                            reportName: 'Selenium Test Report',
                            reportTitles: 'Web Automation Test Results'
                        ])
                        
                        // Generate Allure reports if available
                        try {
                            bat 'mvn allure:report'
                            publishHTML([
                                allowMissing: true,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'target/site/allure-maven-plugin',
                                reportFiles: 'index.html',
                                reportName: 'Allure Report',
                                reportTitles: 'Detailed Test Analysis'
                            ])
                        } catch (Exception e) {
                            echo "Allure reports not available: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        stage('Quality Gates') {
            steps {
                echo 'Checking quality gates...'
                script {
                    // Check test pass rate
                    def testResults = readFile('java-selenium-automation/target/surefire-reports/emailable-report.html')
                    
                    // Fail build if pass rate is below threshold
                    if (testResults.contains('Failed: 0')) {
                        echo 'All tests passed - Quality gate satisfied'
                    } else {
                        echo 'Some tests failed - Review required'
                        // Don't fail the build, but mark as unstable
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
        
        stage('Notification') {
            steps {
                echo 'Sending notifications...'
                script {
                    def testResults = readFile('java-selenium-automation/target/surefire-reports/emailable-report.html')
                    
                    emailext (
                        subject: "Selenium Test Execution - ${currentBuild.currentResult}",
                        body: """
                            <h2>Web Automation Test Results</h2>
                            <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                            <p><strong>Status:</strong> ${currentBuild.currentResult}</p>
                            <p><strong>Test Suite:</strong> ${params.TEST_SUITE}</p>
                            <p><strong>Browser:</strong> ${params.BROWSER_TYPE}</p>
                            <p><strong>Environment:</strong> ${params.ENVIRONMENT}</p>
                            <p><strong>Reports:</strong> <a href="${env.BUILD_URL}Selenium_Test_Report/">View Reports</a></p>
                            
                            <h3>Test Summary:</h3>
                            ${testResults}
                        """,
                        mimeType: 'text/html',
                        to: 'asim.kumar.singh@company.com'
                    )
                }
            }
        }
    }
}
