name: Selenium Web Automation CI/CD
# Author: Asim Kumar Singh
# Framework: Java Selenium Automation

on:
  push:
    branches: [ main, develop ]
    paths: [ 'java-selenium-automation/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'java-selenium-automation/**' ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: true
        default: 'smoke-tests'
        type: choice
        options:
          - smoke-tests
          - regression-tests
          - cross-browser-tests
      browser:
        description: 'Browser for testing'
        required: true
        default: 'chrome'
        type: choice
        options:
          - chrome
          - firefox
          - edge
      environment:
        description: 'Environment to test'
        required: true
        default: 'qa'
        type: choice
        options:
          - qa
          - staging
          - production

env:
  JAVA_VERSION: '11'
  MAVEN_VERSION: '3.8.6'

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run Unit Tests
      run: |
        cd java-selenium-automation
        mvn clean test -Dtest=*UnitTest
        
    - name: Upload Unit Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: unit-test-results
        path: java-selenium-automation/target/surefire-reports/

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    
    strategy:
      matrix:
        browser: [chrome, firefox]
        test-suite: [smoke-tests, regression-tests]
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Setup Chrome Browser
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest
      
    - name: Setup Firefox Browser
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@latest
      
    - name: Setup WebDrivers
      run: |
        # Setup ChromeDriver
        sudo apt-get update
        sudo apt-get install -y wget unzip
        wget -O /tmp/chromedriver.zip https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
        sudo unzip /tmp/chromedriver.zip -d /usr/local/bin/
        sudo chmod +x /usr/local/bin/chromedriver
        
        # Setup GeckoDriver
        wget -O /tmp/geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/v0.33.0/geckodriver-v0.33.0-linux64.tar.gz
        sudo tar -xzf /tmp/geckodriver.tar.gz -C /usr/local/bin/
        sudo chmod +x /usr/local/bin/geckodriver
        
    - name: Build Project
      run: |
        cd java-selenium-automation
        mvn clean compile
        
    - name: Run Integration Tests
      run: |
        cd java-selenium-automation
        TEST_SUITE=${{ matrix.test-suite }}
        BROWSER=${{ matrix.browser }}
        if [ "${{ github.event.inputs.test_suite }}" != "" ]; then
          TEST_SUITE=${{ github.event.inputs.test_suite }}
        fi
        if [ "${{ github.event.inputs.browser }}" != "" ]; then
          BROWSER=${{ github.event.inputs.browser }}
        fi
        mvn test -Dsurefire.suiteXmlFiles=src/test/resources/suites/${TEST_SUITE}.xml \
                 -Dbrowser=${BROWSER} \
                 -Dheadless=true \
                 -Denvironment=qa
        
    - name: Generate Test Report
      if: always()
      run: |
        cd java-selenium-automation
        mvn surefire-report:report
        
    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.browser }}-${{ matrix.test-suite }}
        path: |
          java-selenium-automation/target/surefire-reports/
          java-selenium-automation/reports/
          java-selenium-automation/screenshots/
          
    - name: Publish Test Results
      if: always()
      uses: dorny/test-reporter@v1
      with:
        name: Selenium Tests - ${{ matrix.browser }} - ${{ matrix.test-suite }}
        path: java-selenium-automation/target/surefire-reports/TEST-*.xml
        reporter: java-junit

  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'schedule' || github.event.inputs.test_suite == 'regression-tests'
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Setup Chrome Browser
      uses: browser-actions/setup-chrome@latest
      
    - name: Run Performance Tests
      run: |
        cd java-selenium-automation
        mvn test -Dtest=*PerformanceTest -Dbrowser=chrome -Dheadless=true
        
    - name: Upload Performance Results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: java-selenium-automation/target/performance-reports/

  deploy-reports:
    needs: [integration-tests, performance-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./artifacts
        
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./artifacts
        destination_dir: selenium-reports/${{ github.run_number }}
        
    - name: Slack Notification
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#selenium-automation'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
